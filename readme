easytest

Purpose

easytest is a lightweight test framework by which tests can be launched on
multiple linux servers in parallel. Currently, below features are supported:

1) multiple-language 
   Test scripts can be written in vary of languages (shell, python, perl, ...)
   only if relevant run-time/interpreter is installed on target machine;
   
2) test group
   Tests can be grouped together and run intentionally, e.g. all data
   compression realted tests are put into group-compressin, all network related
   tests are put into group-network, etc. Each group can be run specifically or
   together with other groups.

3) statistic information
   When tests are finished, the information about how many tests are
   passed/failed/skipped is collected. Complete log files are collected for each
   failed script and save into separate tarball.

4) same test(s) can be run on different servers (1:n mode)
   By default, we use one server for testing, thus all test scripts are run on
   same machine. Sometimes,  to validate product's behavior on differnt HW, we
   need to run same tests on different machines. easytest (1:n mode) support to
   launch same test script(s) on multiple machines and collect/compare the
   result.

5) multiple tests can be run on different servers (m:n mode)
  One way to shorten test span is to run different tests on different machines
  in parallelã€‚ Easytest (m:n mode) supports to distribute tests on multiple
  servers, and then collect test results and merge them together.

6) test parallel run
   If a test is irrelevant to any other tests, it can be marked as "parallel",
   which means it can be run in parallel with other scripts on same machine.


Design

easytest consists of below components:

1) testMgr:
The wrapper and single entry point of easytest framework, which will start and
serialize the whole test procedure, including: test env setup, tests collection,
test scripts distribution, tests running and in-time status syncing, test result
collection and report.

2) envMgr:
The util class for env setup, which is resposible for checking connectivity to 
test machine(s), checking and deploying framework util scripts to test
machine(s).

3) testsetMgr: 
The util class for collecting tests to be run per user input.

4) sessionMgr:
The utils classes for starting test run on test machine(s) and sync test result
in time.

5) resultMgr:
The util classes for collecting and merging test results.

6) uiMgr:
The util class for displaying maintaining cli UI during test running.

7) logMgr:
the utill class for managing all logging related things.
